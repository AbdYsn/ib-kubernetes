// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import rest "k8s.io/client-go/rest"
import types "k8s.io/apimachinery/pkg/types"
import v1 "k8s.io/api/core/v1"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetAnnotationsOnPod provides a mock function with given fields: namespace, name
func (_m *Client) GetAnnotationsOnPod(namespace string, name string) (map[string]string, error) {
	ret := _m.Called(namespace, name)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPods provides a mock function with given fields: namespace
func (_m *Client) GetPods(namespace string) (*v1.PodList, error) {
	ret := _m.Called(namespace)

	var r0 *v1.PodList
	if rf, ok := ret.Get(0).(func(string) *v1.PodList); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestClient provides a mock function with given fields:
func (_m *Client) GetRestClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// GetSecret provides a mock function with given fields: namespace, name
func (_m *Client) GetSecret(namespace string, name string) (*v1.Secret, error) {
	ret := _m.Called(namespace, name)

	var r0 *v1.Secret
	if rf, ok := ret.Get(0).(func(string, string) *v1.Secret); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchPod provides a mock function with given fields: pod, patchType, patchData
func (_m *Client) PatchPod(pod *v1.Pod, patchType types.PatchType, patchData []byte) error {
	ret := _m.Called(pod, patchType, patchData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Pod, types.PatchType, []byte) error); ok {
		r0 = rf(pod, patchType, patchData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAnnotationOnPod provides a mock function with given fields: pod, key, value
func (_m *Client) SetAnnotationOnPod(pod *v1.Pod, key string, value string) error {
	ret := _m.Called(pod, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Pod, string, string) error); ok {
		r0 = rf(pod, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
